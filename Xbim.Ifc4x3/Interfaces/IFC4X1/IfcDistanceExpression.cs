// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.GeometryResource
{
	public partial class @IfcDistanceExpression : IIfcDistanceExpression
	{

		[CrossSchemaAttribute(typeof(IIfcDistanceExpression), 1)]
		Ifc4.MeasureResource.IfcLengthMeasure IIfcDistanceExpression.DistanceAlong 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLengthMeasure(DistanceAlong);
			} 
			set
			{
				DistanceAlong = new MeasureResource.IfcLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcDistanceExpression), 2)]
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDistanceExpression.OffsetLateral 
		{ 
			get
			{
				if (!OffsetLateral.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure(OffsetLateral.Value);
			} 
			set
			{
				OffsetLateral = value.HasValue ? 
					new MeasureResource.IfcLengthMeasure(value.Value) :  
					 new MeasureResource.IfcLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcDistanceExpression), 3)]
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDistanceExpression.OffsetVertical 
		{ 
			get
			{
				if (!OffsetVertical.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure(OffsetVertical.Value);
			} 
			set
			{
				OffsetVertical = value.HasValue ? 
					new MeasureResource.IfcLengthMeasure(value.Value) :  
					 new MeasureResource.IfcLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcDistanceExpression), 4)]
		Ifc4.MeasureResource.IfcLengthMeasure? IIfcDistanceExpression.OffsetLongitudinal 
		{ 
			get
			{
				if (!OffsetLongitudinal.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLengthMeasure(OffsetLongitudinal.Value);
			} 
			set
			{
				OffsetLongitudinal = value.HasValue ? 
					new MeasureResource.IfcLengthMeasure(value.Value) :  
					 new MeasureResource.IfcLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcDistanceExpression), 5)]
		Ifc4.MeasureResource.IfcBoolean? IIfcDistanceExpression.AlongHorizontal 
		{ 
			get
			{
				if (!AlongHorizontal.HasValue) return null;
				return new Ifc4.MeasureResource.IfcBoolean(AlongHorizontal.Value);
			} 
			set
			{
				AlongHorizontal = value.HasValue ? 
					new MeasureResource.IfcBoolean(value.Value) :  
					 new MeasureResource.IfcBoolean?() ;
				
			}
		}
	//## Custom code
	//##
	}
}