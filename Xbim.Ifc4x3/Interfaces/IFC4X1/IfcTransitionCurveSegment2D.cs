// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.GeometryResource
{
	public partial class @IfcTransitionCurveSegment2D : IIfcTransitionCurveSegment2D
	{

		[CrossSchemaAttribute(typeof(IIfcTransitionCurveSegment2D), 4)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcTransitionCurveSegment2D.StartRadius 
		{ 
			get
			{
				if (!StartRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(StartRadius.Value);
			} 
			set
			{
				StartRadius = value.HasValue ? 
					new MeasureResource.IfcPositiveLengthMeasure(value.Value) :  
					 new MeasureResource.IfcPositiveLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcTransitionCurveSegment2D), 5)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcTransitionCurveSegment2D.EndRadius 
		{ 
			get
			{
				if (!EndRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(EndRadius.Value);
			} 
			set
			{
				EndRadius = value.HasValue ? 
					new MeasureResource.IfcPositiveLengthMeasure(value.Value) :  
					 new MeasureResource.IfcPositiveLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcTransitionCurveSegment2D), 6)]
		Ifc4.MeasureResource.IfcBoolean IIfcTransitionCurveSegment2D.IsStartRadiusCCW 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcBoolean(IsStartRadiusCCW);
			} 
			set
			{
				IsStartRadiusCCW = new MeasureResource.IfcBoolean(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcTransitionCurveSegment2D), 7)]
		Ifc4.MeasureResource.IfcBoolean IIfcTransitionCurveSegment2D.IsEndRadiusCCW 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcBoolean(IsEndRadiusCCW);
			} 
			set
			{
				IsEndRadiusCCW = new MeasureResource.IfcBoolean(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcTransitionCurveSegment2D), 8)]
		Ifc4.Interfaces.IfcTransitionCurveType IIfcTransitionCurveSegment2D.TransitionCurveType 
		{ 
			get
			{
				//## Custom code to handle enumeration of TransitionCurveType
				//##
				switch (TransitionCurveType)
				{
					case IfcTransitionCurveType.BIQUADRATICPARABOLA:
						return Ifc4.Interfaces.IfcTransitionCurveType.BIQUADRATICPARABOLA;
					case IfcTransitionCurveType.BLOSSCURVE:
						return Ifc4.Interfaces.IfcTransitionCurveType.BLOSSCURVE;
					case IfcTransitionCurveType.CLOTHOIDCURVE:
						return Ifc4.Interfaces.IfcTransitionCurveType.CLOTHOIDCURVE;
					case IfcTransitionCurveType.COSINECURVE:
						return Ifc4.Interfaces.IfcTransitionCurveType.COSINECURVE;
					case IfcTransitionCurveType.CUBICPARABOLA:
						return Ifc4.Interfaces.IfcTransitionCurveType.CUBICPARABOLA;
					case IfcTransitionCurveType.SINECURVE:
						return Ifc4.Interfaces.IfcTransitionCurveType.SINECURVE;
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				//## Custom code to handle setting of enumeration of TransitionCurveType
				//##
				switch (value)
				{
					case Ifc4.Interfaces.IfcTransitionCurveType.BIQUADRATICPARABOLA:
						TransitionCurveType = IfcTransitionCurveType.BIQUADRATICPARABOLA;
						return;
					case Ifc4.Interfaces.IfcTransitionCurveType.BLOSSCURVE:
						TransitionCurveType = IfcTransitionCurveType.BLOSSCURVE;
						return;
					case Ifc4.Interfaces.IfcTransitionCurveType.CLOTHOIDCURVE:
						TransitionCurveType = IfcTransitionCurveType.CLOTHOIDCURVE;
						return;
					case Ifc4.Interfaces.IfcTransitionCurveType.COSINECURVE:
						TransitionCurveType = IfcTransitionCurveType.COSINECURVE;
						return;
					case Ifc4.Interfaces.IfcTransitionCurveType.CUBICPARABOLA:
						TransitionCurveType = IfcTransitionCurveType.CUBICPARABOLA;
						return;
					case Ifc4.Interfaces.IfcTransitionCurveType.SINECURVE:
						TransitionCurveType = IfcTransitionCurveType.SINECURVE;
						return;
					default:
						throw new System.ArgumentOutOfRangeException();
				}
				
			}
		}
	//## Custom code
	//##
	}
}