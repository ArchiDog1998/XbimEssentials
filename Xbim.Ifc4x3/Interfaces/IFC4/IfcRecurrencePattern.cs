// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.DateTimeResource
{
	public partial class @IfcRecurrencePattern : IIfcRecurrencePattern
	{

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 1)]
		Ifc4.Interfaces.IfcRecurrenceTypeEnum IIfcRecurrencePattern.RecurrenceType 
		{ 
			get
			{
				//## Custom code to handle enumeration of RecurrenceType
				//##
				switch (RecurrenceType)
				{
					case IfcRecurrenceTypeEnum.DAILY:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.DAILY;
					case IfcRecurrenceTypeEnum.WEEKLY:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.WEEKLY;
					case IfcRecurrenceTypeEnum.MONTHLY_BY_DAY_OF_MONTH:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.MONTHLY_BY_DAY_OF_MONTH;
					case IfcRecurrenceTypeEnum.MONTHLY_BY_POSITION:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.MONTHLY_BY_POSITION;
					case IfcRecurrenceTypeEnum.BY_DAY_COUNT:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.BY_DAY_COUNT;
					case IfcRecurrenceTypeEnum.BY_WEEKDAY_COUNT:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.BY_WEEKDAY_COUNT;
					case IfcRecurrenceTypeEnum.YEARLY_BY_DAY_OF_MONTH:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.YEARLY_BY_DAY_OF_MONTH;
					case IfcRecurrenceTypeEnum.YEARLY_BY_POSITION:
						return Ifc4.Interfaces.IfcRecurrenceTypeEnum.YEARLY_BY_POSITION;
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				//## Custom code to handle setting of enumeration of RecurrenceType
				//##
				switch (value)
				{
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.DAILY:
						RecurrenceType = IfcRecurrenceTypeEnum.DAILY;
						return;
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.WEEKLY:
						RecurrenceType = IfcRecurrenceTypeEnum.WEEKLY;
						return;
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.MONTHLY_BY_DAY_OF_MONTH:
						RecurrenceType = IfcRecurrenceTypeEnum.MONTHLY_BY_DAY_OF_MONTH;
						return;
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.MONTHLY_BY_POSITION:
						RecurrenceType = IfcRecurrenceTypeEnum.MONTHLY_BY_POSITION;
						return;
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.BY_DAY_COUNT:
						RecurrenceType = IfcRecurrenceTypeEnum.BY_DAY_COUNT;
						return;
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.BY_WEEKDAY_COUNT:
						RecurrenceType = IfcRecurrenceTypeEnum.BY_WEEKDAY_COUNT;
						return;
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.YEARLY_BY_DAY_OF_MONTH:
						RecurrenceType = IfcRecurrenceTypeEnum.YEARLY_BY_DAY_OF_MONTH;
						return;
					case Ifc4.Interfaces.IfcRecurrenceTypeEnum.YEARLY_BY_POSITION:
						RecurrenceType = IfcRecurrenceTypeEnum.YEARLY_BY_POSITION;
						return;
					default:
						throw new System.ArgumentOutOfRangeException();
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 2)]
		IItemSet<Xbim.Ifc4.DateTimeResource.IfcDayInMonthNumber> IIfcRecurrencePattern.DayComponent 
		{ 
			get
			{
			
				return new Common.Collections.ProxyValueSet<IfcDayInMonthNumber, Ifc4.DateTimeResource.IfcDayInMonthNumber>(DayComponent, 
					s => new Ifc4.DateTimeResource.IfcDayInMonthNumber(s), 
					t => new IfcDayInMonthNumber(t));
			} 
		}

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 3)]
		IItemSet<Xbim.Ifc4.DateTimeResource.IfcDayInWeekNumber> IIfcRecurrencePattern.WeekdayComponent 
		{ 
			get
			{
			
				return new Common.Collections.ProxyValueSet<IfcDayInWeekNumber, Ifc4.DateTimeResource.IfcDayInWeekNumber>(WeekdayComponent, 
					s => new Ifc4.DateTimeResource.IfcDayInWeekNumber(s), 
					t => new IfcDayInWeekNumber(t));
			} 
		}

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 4)]
		IItemSet<Xbim.Ifc4.DateTimeResource.IfcMonthInYearNumber> IIfcRecurrencePattern.MonthComponent 
		{ 
			get
			{
			
				return new Common.Collections.ProxyValueSet<IfcMonthInYearNumber, Ifc4.DateTimeResource.IfcMonthInYearNumber>(MonthComponent, 
					s => new Ifc4.DateTimeResource.IfcMonthInYearNumber(s), 
					t => new IfcMonthInYearNumber(t));
			} 
		}

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 5)]
		Ifc4.MeasureResource.IfcInteger? IIfcRecurrencePattern.Position 
		{ 
			get
			{
				if (!Position.HasValue) return null;
				return new Ifc4.MeasureResource.IfcInteger(Position.Value);
			} 
			set
			{
				Position = value.HasValue ? 
					new MeasureResource.IfcInteger(value.Value) :  
					 new MeasureResource.IfcInteger?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 6)]
		Ifc4.MeasureResource.IfcInteger? IIfcRecurrencePattern.Interval 
		{ 
			get
			{
				if (!Interval.HasValue) return null;
				return new Ifc4.MeasureResource.IfcInteger(Interval.Value);
			} 
			set
			{
				Interval = value.HasValue ? 
					new MeasureResource.IfcInteger(value.Value) :  
					 new MeasureResource.IfcInteger?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 7)]
		Ifc4.MeasureResource.IfcInteger? IIfcRecurrencePattern.Occurrences 
		{ 
			get
			{
				if (!Occurrences.HasValue) return null;
				return new Ifc4.MeasureResource.IfcInteger(Occurrences.Value);
			} 
			set
			{
				Occurrences = value.HasValue ? 
					new MeasureResource.IfcInteger(value.Value) :  
					 new MeasureResource.IfcInteger?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRecurrencePattern), 8)]
		IItemSet<IIfcTimePeriod> IIfcRecurrencePattern.TimePeriods 
		{ 
			get
			{
			
				return new Common.Collections.ProxyItemSet<IfcTimePeriod, IIfcTimePeriod>(TimePeriods);
			} 
		}
	//## Custom code
	//##
	}
}