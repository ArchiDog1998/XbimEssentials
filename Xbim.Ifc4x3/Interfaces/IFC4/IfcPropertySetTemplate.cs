// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.Kernel
{
	public partial class @IfcPropertySetTemplate : IIfcPropertySetTemplate
	{

		[CrossSchemaAttribute(typeof(IIfcPropertySetTemplate), 5)]
		Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum? IIfcPropertySetTemplate.TemplateType 
		{ 
			get
			{
				//## Custom code to handle enumeration of TemplateType
				//##
				switch (TemplateType)
				{
					case IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENONLY:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENONLY;
					case IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENOVERRIDE:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENOVERRIDE;
					case IfcPropertySetTemplateTypeEnum.PSET_OCCURRENCEDRIVEN:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_OCCURRENCEDRIVEN;
					case IfcPropertySetTemplateTypeEnum.PSET_PERFORMANCEDRIVEN:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_PERFORMANCEDRIVEN;
					case IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENONLY:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENONLY;
					case IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENOVERRIDE:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENOVERRIDE;
					case IfcPropertySetTemplateTypeEnum.QTO_OCCURRENCEDRIVEN:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.QTO_OCCURRENCEDRIVEN;
					case IfcPropertySetTemplateTypeEnum.NOTDEFINED:
						return Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.NOTDEFINED;
					case null: 
						return null;
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				//## Custom code to handle setting of enumeration of TemplateType
				//##
				switch (value)
				{
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENONLY:
						TemplateType = IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENONLY;
						return;
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENOVERRIDE:
						TemplateType = IfcPropertySetTemplateTypeEnum.PSET_TYPEDRIVENOVERRIDE;
						return;
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_OCCURRENCEDRIVEN:
						TemplateType = IfcPropertySetTemplateTypeEnum.PSET_OCCURRENCEDRIVEN;
						return;
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.PSET_PERFORMANCEDRIVEN:
						TemplateType = IfcPropertySetTemplateTypeEnum.PSET_PERFORMANCEDRIVEN;
						return;
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENONLY:
						TemplateType = IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENONLY;
						return;
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENOVERRIDE:
						TemplateType = IfcPropertySetTemplateTypeEnum.QTO_TYPEDRIVENOVERRIDE;
						return;
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.QTO_OCCURRENCEDRIVEN:
						TemplateType = IfcPropertySetTemplateTypeEnum.QTO_OCCURRENCEDRIVEN;
						return;
					case Ifc4.Interfaces.IfcPropertySetTemplateTypeEnum.NOTDEFINED:
						TemplateType = IfcPropertySetTemplateTypeEnum.NOTDEFINED;
						return;
					
					case null:
						TemplateType = null;
						return;
					default:
						throw new System.ArgumentOutOfRangeException();
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcPropertySetTemplate), 6)]
		Ifc4.MeasureResource.IfcIdentifier? IIfcPropertySetTemplate.ApplicableEntity 
		{ 
			get
			{
				if (!ApplicableEntity.HasValue) return null;
				return new Ifc4.MeasureResource.IfcIdentifier(ApplicableEntity.Value);
			} 
			set
			{
				ApplicableEntity = value.HasValue ? 
					new MeasureResource.IfcIdentifier(value.Value) :  
					 new MeasureResource.IfcIdentifier?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcPropertySetTemplate), 7)]
		IItemSet<IIfcPropertyTemplate> IIfcPropertySetTemplate.HasPropertyTemplates 
		{ 
			get
			{
			
				return new Common.Collections.ProxyItemSet<IfcPropertyTemplate, IIfcPropertyTemplate>(HasPropertyTemplates);
			} 
		}
		IEnumerable<IIfcRelDefinesByTemplate> IIfcPropertySetTemplate.Defines 
		{ 
			get
			{
				return Model.Instances.Where<IIfcRelDefinesByTemplate>(e => (e.RelatingTemplate as IfcPropertySetTemplate) == this, "RelatingTemplate", this);
			} 
		}
	//## Custom code
	//##
	}
}