// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.MaterialResource
{
	public partial class @IfcMaterialLayerWithOffsets : IIfcMaterialLayerWithOffsets
	{

		[CrossSchemaAttribute(typeof(IIfcMaterialLayerWithOffsets), 8)]
		Ifc4.Interfaces.IfcLayerSetDirectionEnum IIfcMaterialLayerWithOffsets.OffsetDirection 
		{ 
			get
			{
				//## Custom code to handle enumeration of OffsetDirection
				//##
				switch (OffsetDirection)
				{
					case IfcLayerSetDirectionEnum.AXIS1:
						return Ifc4.Interfaces.IfcLayerSetDirectionEnum.AXIS1;
					case IfcLayerSetDirectionEnum.AXIS2:
						return Ifc4.Interfaces.IfcLayerSetDirectionEnum.AXIS2;
					case IfcLayerSetDirectionEnum.AXIS3:
						return Ifc4.Interfaces.IfcLayerSetDirectionEnum.AXIS3;
					
					default:
						throw new System.ArgumentOutOfRangeException();
				}
			} 
			set
			{
				//## Custom code to handle setting of enumeration of OffsetDirection
				//##
				switch (value)
				{
					case Ifc4.Interfaces.IfcLayerSetDirectionEnum.AXIS1:
						OffsetDirection = IfcLayerSetDirectionEnum.AXIS1;
						return;
					case Ifc4.Interfaces.IfcLayerSetDirectionEnum.AXIS2:
						OffsetDirection = IfcLayerSetDirectionEnum.AXIS2;
						return;
					case Ifc4.Interfaces.IfcLayerSetDirectionEnum.AXIS3:
						OffsetDirection = IfcLayerSetDirectionEnum.AXIS3;
						return;
					default:
						throw new System.ArgumentOutOfRangeException();
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMaterialLayerWithOffsets), 9)]
		IItemSet<Xbim.Ifc4.MeasureResource.IfcLengthMeasure> IIfcMaterialLayerWithOffsets.OffsetValues 
		{ 
			get
			{
			
				return new Common.Collections.ProxyValueSet<MeasureResource.IfcLengthMeasure, Ifc4.MeasureResource.IfcLengthMeasure>(OffsetValues, 
					s => new Ifc4.MeasureResource.IfcLengthMeasure(s), 
					t => new MeasureResource.IfcLengthMeasure(t));
			} 
		}
	//## Custom code
	//##
	}
}