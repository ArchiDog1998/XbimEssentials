// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.RepresentationResource
{
	public partial class @IfcMapConversion : IIfcMapConversion
	{

		[CrossSchemaAttribute(typeof(IIfcMapConversion), 3)]
		Ifc4.MeasureResource.IfcLengthMeasure IIfcMapConversion.Eastings 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLengthMeasure(Eastings);
			} 
			set
			{
				Eastings = new MeasureResource.IfcLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMapConversion), 4)]
		Ifc4.MeasureResource.IfcLengthMeasure IIfcMapConversion.Northings 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLengthMeasure(Northings);
			} 
			set
			{
				Northings = new MeasureResource.IfcLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMapConversion), 5)]
		Ifc4.MeasureResource.IfcLengthMeasure IIfcMapConversion.OrthogonalHeight 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLengthMeasure(OrthogonalHeight);
			} 
			set
			{
				OrthogonalHeight = new MeasureResource.IfcLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMapConversion), 6)]
		Ifc4.MeasureResource.IfcReal? IIfcMapConversion.XAxisAbscissa 
		{ 
			get
			{
				if (!XAxisAbscissa.HasValue) return null;
				return new Ifc4.MeasureResource.IfcReal(XAxisAbscissa.Value);
			} 
			set
			{
				XAxisAbscissa = value.HasValue ? 
					new MeasureResource.IfcReal(value.Value) :  
					 new MeasureResource.IfcReal?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMapConversion), 7)]
		Ifc4.MeasureResource.IfcReal? IIfcMapConversion.XAxisOrdinate 
		{ 
			get
			{
				if (!XAxisOrdinate.HasValue) return null;
				return new Ifc4.MeasureResource.IfcReal(XAxisOrdinate.Value);
			} 
			set
			{
				XAxisOrdinate = value.HasValue ? 
					new MeasureResource.IfcReal(value.Value) :  
					 new MeasureResource.IfcReal?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMapConversion), 8)]
		Ifc4.MeasureResource.IfcReal? IIfcMapConversion.Scale 
		{ 
			get
			{
				if (!Scale.HasValue) return null;
				return new Ifc4.MeasureResource.IfcReal(Scale.Value);
			} 
			set
			{
				Scale = value.HasValue ? 
					new MeasureResource.IfcReal(value.Value) :  
					 new MeasureResource.IfcReal?() ;
				
			}
		}
	//## Custom code
	//##
	}
}