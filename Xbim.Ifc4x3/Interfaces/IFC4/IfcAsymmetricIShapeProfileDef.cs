// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.ProfileResource
{
	public partial class @IfcAsymmetricIShapeProfileDef : IIfcAsymmetricIShapeProfileDef
	{

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 4)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.BottomFlangeWidth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(BottomFlangeWidth);
			} 
			set
			{
				BottomFlangeWidth = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 5)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.OverallDepth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(OverallDepth);
			} 
			set
			{
				OverallDepth = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 6)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.WebThickness 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(WebThickness);
			} 
			set
			{
				WebThickness = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 7)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.BottomFlangeThickness 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(BottomFlangeThickness);
			} 
			set
			{
				BottomFlangeThickness = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 8)]
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.BottomFlangeFilletRadius 
		{ 
			get
			{
				if (!BottomFlangeFilletRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(BottomFlangeFilletRadius.Value);
			} 
			set
			{
				BottomFlangeFilletRadius = value.HasValue ? 
					new MeasureResource.IfcNonNegativeLengthMeasure(value.Value) :  
					 new MeasureResource.IfcNonNegativeLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 9)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure IIfcAsymmetricIShapeProfileDef.TopFlangeWidth 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(TopFlangeWidth);
			} 
			set
			{
				TopFlangeWidth = new MeasureResource.IfcPositiveLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 10)]
		Ifc4.MeasureResource.IfcPositiveLengthMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeThickness 
		{ 
			get
			{
				if (!TopFlangeThickness.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPositiveLengthMeasure(TopFlangeThickness.Value);
			} 
			set
			{
				TopFlangeThickness = value.HasValue ? 
					new MeasureResource.IfcPositiveLengthMeasure(value.Value) :  
					 new MeasureResource.IfcPositiveLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 11)]
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeFilletRadius 
		{ 
			get
			{
				if (!TopFlangeFilletRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(TopFlangeFilletRadius.Value);
			} 
			set
			{
				TopFlangeFilletRadius = value.HasValue ? 
					new MeasureResource.IfcNonNegativeLengthMeasure(value.Value) :  
					 new MeasureResource.IfcNonNegativeLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 12)]
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.BottomFlangeEdgeRadius 
		{ 
			get
			{
				if (!BottomFlangeEdgeRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(BottomFlangeEdgeRadius.Value);
			} 
			set
			{
				BottomFlangeEdgeRadius = value.HasValue ? 
					new MeasureResource.IfcNonNegativeLengthMeasure(value.Value) :  
					 new MeasureResource.IfcNonNegativeLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 13)]
		Ifc4.MeasureResource.IfcPlaneAngleMeasure? IIfcAsymmetricIShapeProfileDef.BottomFlangeSlope 
		{ 
			get
			{
				if (!BottomFlangeSlope.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPlaneAngleMeasure(BottomFlangeSlope.Value);
			} 
			set
			{
				BottomFlangeSlope = value.HasValue ? 
					new MeasureResource.IfcPlaneAngleMeasure(value.Value) :  
					 new MeasureResource.IfcPlaneAngleMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 14)]
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeEdgeRadius 
		{ 
			get
			{
				if (!TopFlangeEdgeRadius.HasValue) return null;
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(TopFlangeEdgeRadius.Value);
			} 
			set
			{
				TopFlangeEdgeRadius = value.HasValue ? 
					new MeasureResource.IfcNonNegativeLengthMeasure(value.Value) :  
					 new MeasureResource.IfcNonNegativeLengthMeasure?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcAsymmetricIShapeProfileDef), 15)]
		Ifc4.MeasureResource.IfcPlaneAngleMeasure? IIfcAsymmetricIShapeProfileDef.TopFlangeSlope 
		{ 
			get
			{
				if (!TopFlangeSlope.HasValue) return null;
				return new Ifc4.MeasureResource.IfcPlaneAngleMeasure(TopFlangeSlope.Value);
			} 
			set
			{
				TopFlangeSlope = value.HasValue ? 
					new MeasureResource.IfcPlaneAngleMeasure(value.Value) :  
					 new MeasureResource.IfcPlaneAngleMeasure?() ;
				
			}
		}
	//## Custom code
	//##
	}
}