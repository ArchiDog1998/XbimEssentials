// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.MaterialResource
{
	public partial class @IfcMaterialLayer : IIfcMaterialLayer
	{

		[CrossSchemaAttribute(typeof(IIfcMaterialLayer), 1)]
		IIfcMaterial IIfcMaterialLayer.Material 
		{ 
			get
			{
				return Material;
			} 
			set
			{
				Material = value as IfcMaterial;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMaterialLayer), 2)]
		Ifc4.MeasureResource.IfcNonNegativeLengthMeasure IIfcMaterialLayer.LayerThickness 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcNonNegativeLengthMeasure(LayerThickness);
			} 
			set
			{
				LayerThickness = new MeasureResource.IfcNonNegativeLengthMeasure(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMaterialLayer), 3)]
		Ifc4.MeasureResource.IfcLogical? IIfcMaterialLayer.IsVentilated 
		{ 
			get
			{
				if (!IsVentilated.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLogical(IsVentilated.Value);
			} 
			set
			{
				IsVentilated = value.HasValue ? 
					new MeasureResource.IfcLogical(value.Value) :  
					 new MeasureResource.IfcLogical?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMaterialLayer), 4)]
		Ifc4.MeasureResource.IfcLabel? IIfcMaterialLayer.Name 
		{ 
			get
			{
				if (!Name.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Name.Value);
			} 
			set
			{
				Name = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMaterialLayer), 5)]
		Ifc4.MeasureResource.IfcText? IIfcMaterialLayer.Description 
		{ 
			get
			{
				if (!Description.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Description.Value);
			} 
			set
			{
				Description = value.HasValue ? 
					new MeasureResource.IfcText(value.Value) :  
					 new MeasureResource.IfcText?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMaterialLayer), 6)]
		Ifc4.MeasureResource.IfcLabel? IIfcMaterialLayer.Category 
		{ 
			get
			{
				if (!Category.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Category.Value);
			} 
			set
			{
				Category = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcMaterialLayer), 7)]
		Ifc4.MeasureResource.IfcInteger? IIfcMaterialLayer.Priority 
		{ 
			get
			{
				if (!Priority.HasValue) return null;
				return new Ifc4.MeasureResource.IfcInteger(Priority.Value);
			} 
			set
			{
				Priority = value.HasValue ? 
					new MeasureResource.IfcInteger(value.Value) :  
					 new MeasureResource.IfcInteger?() ;
				
			}
		}
		IIfcMaterialLayerSet IIfcMaterialLayer.ToMaterialLayerSet 
		{ 
			get
			{
				return Model.Instances.FirstOrDefault<IIfcMaterialLayerSet>(e => e.MaterialLayers != null &&  e.MaterialLayers.Contains(this), "MaterialLayers", this);
			} 
		}
	//## Custom code
	//##
	}
}