// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.ExternalReferenceResource
{
	public partial class @IfcLibraryInformation : IIfcLibraryInformation
	{

		[CrossSchemaAttribute(typeof(IIfcLibraryInformation), 1)]
		Ifc4.MeasureResource.IfcLabel IIfcLibraryInformation.Name 
		{ 
			get
			{
				return new Ifc4.MeasureResource.IfcLabel(Name);
			} 
			set
			{
				Name = new MeasureResource.IfcLabel(value);
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcLibraryInformation), 2)]
		Ifc4.MeasureResource.IfcLabel? IIfcLibraryInformation.Version 
		{ 
			get
			{
				if (!Version.HasValue) return null;
				return new Ifc4.MeasureResource.IfcLabel(Version.Value);
			} 
			set
			{
				Version = value.HasValue ? 
					new MeasureResource.IfcLabel(value.Value) :  
					 new MeasureResource.IfcLabel?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcLibraryInformation), 3)]
		IIfcActorSelect IIfcLibraryInformation.Publisher 
		{ 
			get
			{
				if (Publisher == null) return null;
				var ifcorganization = Publisher as ActorResource.IfcOrganization;
				if (ifcorganization != null) 
					return ifcorganization;
				var ifcperson = Publisher as ActorResource.IfcPerson;
				if (ifcperson != null) 
					return ifcperson;
				var ifcpersonandorganization = Publisher as ActorResource.IfcPersonAndOrganization;
				if (ifcpersonandorganization != null) 
					return ifcpersonandorganization;
				return null;
			} 
			set
			{
				if (value == null)
				{
					Publisher = null;
					return;
				}	
				var ifcorganization = value as ActorResource.IfcOrganization;
				if (ifcorganization != null) 
				{
					Publisher = ifcorganization;
					return;
				}
				var ifcperson = value as ActorResource.IfcPerson;
				if (ifcperson != null) 
				{
					Publisher = ifcperson;
					return;
				}
				var ifcpersonandorganization = value as ActorResource.IfcPersonAndOrganization;
				if (ifcpersonandorganization != null) 
				{
					Publisher = ifcpersonandorganization;
					return;
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcLibraryInformation), 4)]
		Ifc4.DateTimeResource.IfcDateTime? IIfcLibraryInformation.VersionDate 
		{ 
			get
			{
				if (!VersionDate.HasValue) return null;
				return new Ifc4.DateTimeResource.IfcDateTime(VersionDate.Value);
			} 
			set
			{
				VersionDate = value.HasValue ? 
					new DateTimeResource.IfcDateTime(value.Value) :  
					 new DateTimeResource.IfcDateTime?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcLibraryInformation), 5)]
		Ifc4.ExternalReferenceResource.IfcURIReference? IIfcLibraryInformation.Location 
		{ 
			get
			{
				if (!Location.HasValue) return null;
				return new Ifc4.ExternalReferenceResource.IfcURIReference(Location.Value);
			} 
			set
			{
				Location = value.HasValue ? 
					new IfcURIReference(value.Value) :  
					 new IfcURIReference?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcLibraryInformation), 6)]
		Ifc4.MeasureResource.IfcText? IIfcLibraryInformation.Description 
		{ 
			get
			{
				if (!Description.HasValue) return null;
				return new Ifc4.MeasureResource.IfcText(Description.Value);
			} 
			set
			{
				Description = value.HasValue ? 
					new MeasureResource.IfcText(value.Value) :  
					 new MeasureResource.IfcText?() ;
				
			}
		}
		IEnumerable<IIfcRelAssociatesLibrary> IIfcLibraryInformation.LibraryInfoForObjects 
		{ 
			get
			{
				return Model.Instances.Where<IIfcRelAssociatesLibrary>(e => (e.RelatingLibrary as IfcLibraryInformation) == this, "RelatingLibrary", this);
			} 
		}
		IEnumerable<IIfcLibraryReference> IIfcLibraryInformation.HasLibraryReferences 
		{ 
			get
			{
				return Model.Instances.Where<IIfcLibraryReference>(e => (e.ReferencedLibrary as IfcLibraryInformation) == this, "ReferencedLibrary", this);
			} 
		}
	//## Custom code
	//##
	}
}