// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.ProductExtension
{
	public partial class @IfcRelInterferesElements : IIfcRelInterferesElements
	{

		[CrossSchemaAttribute(typeof(IIfcRelInterferesElements), 5)]
		IIfcElement IIfcRelInterferesElements.RelatingElement 
		{ 
			get
			{
				//## Handle return of RelatingElement for which no match was found
				//TODO: Handle return of RelatingElement for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
			set
			{
				//## Handle setting of RelatingElement for which no match was found
				//TODO: Handle setting of RelatingElement for which no match was found
				throw new System.NotImplementedException();
				//##
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRelInterferesElements), 6)]
		IIfcElement IIfcRelInterferesElements.RelatedElement 
		{ 
			get
			{
				//## Handle return of RelatedElement for which no match was found
				//TODO: Handle return of RelatedElement for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
			set
			{
				//## Handle setting of RelatedElement for which no match was found
				//TODO: Handle setting of RelatedElement for which no match was found
				throw new System.NotImplementedException();
				//##
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRelInterferesElements), 7)]
		IIfcConnectionGeometry IIfcRelInterferesElements.InterferenceGeometry 
		{ 
			get
			{
				return InterferenceGeometry;
			} 
			set
			{
				InterferenceGeometry = value as GeometricConstraintResource.IfcConnectionGeometry;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRelInterferesElements), 8)]
		Ifc4.MeasureResource.IfcIdentifier? IIfcRelInterferesElements.InterferenceType 
		{ 
			get
			{
				if (!InterferenceType.HasValue) return null;
				return new Ifc4.MeasureResource.IfcIdentifier(InterferenceType.Value);
			} 
			set
			{
				InterferenceType = value.HasValue ? 
					new MeasureResource.IfcIdentifier(value.Value) :  
					 new MeasureResource.IfcIdentifier?() ;
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcRelInterferesElements), 9)]
		bool? IIfcRelInterferesElements.ImpliedOrder 
		{ 
			get
			{
				//## Handle return of ImpliedOrder for which no match was found
				//TODO: Handle return of ImpliedOrder for which no match was found
				throw new System.NotImplementedException();
				//##
			} 
			set
			{
				ImpliedOrder = value;
				
			}
		}
	//## Custom code
	//##
	}
}