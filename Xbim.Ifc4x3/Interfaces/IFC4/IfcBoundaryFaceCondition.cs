// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4.Interfaces;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;

//## Custom using statements
//##

// ReSharper disable once CheckNamespace
namespace Xbim.Ifc4x3.StructuralLoadResource
{
	public partial class @IfcBoundaryFaceCondition : IIfcBoundaryFaceCondition
	{

		[CrossSchemaAttribute(typeof(IIfcBoundaryFaceCondition), 2)]
		IIfcModulusOfSubgradeReactionSelect IIfcBoundaryFaceCondition.TranslationalStiffnessByAreaX 
		{ 
			get
			{
				if (TranslationalStiffnessByAreaX == null) return null;
				if (TranslationalStiffnessByAreaX is MeasureResource.IfcBoolean) 
					return new Ifc4.MeasureResource.IfcBoolean((MeasureResource.IfcBoolean)TranslationalStiffnessByAreaX);
				if (TranslationalStiffnessByAreaX is MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
					return new Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure((MeasureResource.IfcModulusOfSubgradeReactionMeasure)TranslationalStiffnessByAreaX);
				return null;
			} 
			set
			{
				if (value == null)
				{
					TranslationalStiffnessByAreaX = null;
					return;
				}	
				if (value is Ifc4.MeasureResource.IfcBoolean) 
				{
					TranslationalStiffnessByAreaX = new MeasureResource.IfcBoolean((Ifc4.MeasureResource.IfcBoolean)value);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
				{
					TranslationalStiffnessByAreaX = new MeasureResource.IfcModulusOfSubgradeReactionMeasure((Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure)value);
					return;
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcBoundaryFaceCondition), 3)]
		IIfcModulusOfSubgradeReactionSelect IIfcBoundaryFaceCondition.TranslationalStiffnessByAreaY 
		{ 
			get
			{
				if (TranslationalStiffnessByAreaY == null) return null;
				if (TranslationalStiffnessByAreaY is MeasureResource.IfcBoolean) 
					return new Ifc4.MeasureResource.IfcBoolean((MeasureResource.IfcBoolean)TranslationalStiffnessByAreaY);
				if (TranslationalStiffnessByAreaY is MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
					return new Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure((MeasureResource.IfcModulusOfSubgradeReactionMeasure)TranslationalStiffnessByAreaY);
				return null;
			} 
			set
			{
				if (value == null)
				{
					TranslationalStiffnessByAreaY = null;
					return;
				}	
				if (value is Ifc4.MeasureResource.IfcBoolean) 
				{
					TranslationalStiffnessByAreaY = new MeasureResource.IfcBoolean((Ifc4.MeasureResource.IfcBoolean)value);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
				{
					TranslationalStiffnessByAreaY = new MeasureResource.IfcModulusOfSubgradeReactionMeasure((Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure)value);
					return;
				}
				
			}
		}

		[CrossSchemaAttribute(typeof(IIfcBoundaryFaceCondition), 4)]
		IIfcModulusOfSubgradeReactionSelect IIfcBoundaryFaceCondition.TranslationalStiffnessByAreaZ 
		{ 
			get
			{
				if (TranslationalStiffnessByAreaZ == null) return null;
				if (TranslationalStiffnessByAreaZ is MeasureResource.IfcBoolean) 
					return new Ifc4.MeasureResource.IfcBoolean((MeasureResource.IfcBoolean)TranslationalStiffnessByAreaZ);
				if (TranslationalStiffnessByAreaZ is MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
					return new Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure((MeasureResource.IfcModulusOfSubgradeReactionMeasure)TranslationalStiffnessByAreaZ);
				return null;
			} 
			set
			{
				if (value == null)
				{
					TranslationalStiffnessByAreaZ = null;
					return;
				}	
				if (value is Ifc4.MeasureResource.IfcBoolean) 
				{
					TranslationalStiffnessByAreaZ = new MeasureResource.IfcBoolean((Ifc4.MeasureResource.IfcBoolean)value);
					return;
				}
				if (value is Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure) 
				{
					TranslationalStiffnessByAreaZ = new MeasureResource.IfcModulusOfSubgradeReactionMeasure((Ifc4.MeasureResource.IfcModulusOfSubgradeReactionMeasure)value);
					return;
				}
				
			}
		}
	//## Custom code
	//##
	}
}