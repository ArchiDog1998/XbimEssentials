// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4x3.PresentationAppearanceResource;
//## Custom using statements
//##


namespace Xbim.Ifc4x3.PresentationAppearanceResource
{
	[ExpressType("IfcIndexedPolygonalTextureMap", 1451)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcIndexedPolygonalTextureMap : IfcIndexedTextureMap, IInstantiableEntity, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@IfcIndexedPolygonalTextureMap>
	{

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcIndexedPolygonalTextureMap(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_texCoordIndices = new ItemSet<IfcTextureCoordinateIndices>( this, 0,  4);
		}

		#region Explicit attribute fields
		private readonly ItemSet<IfcTextureCoordinateIndices> _texCoordIndices;
		#endregion
	
		#region Explicit attribute properties
		[IndexedProperty]
		[EntityAttribute(4, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, new int [] { 1 }, new int [] { -1 }, 4)]
		public IItemSet<IfcTextureCoordinateIndices> @TexCoordIndices 
		{ 
			get 
			{
				if(_activated) return _texCoordIndices;
				Activate();
				return _texCoordIndices;
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 3: 
					_texCoordIndices.InternalAdd((IfcTextureCoordinateIndices)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcIndexedPolygonalTextureMap other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				foreach(var entity in @Maps)
					yield return entity;
				if (@MappedTo != null)
					yield return @MappedTo;
				if (@TexCoords != null)
					yield return @TexCoords;
				foreach(var entity in @TexCoordIndices)
					yield return entity;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				foreach(var entity in @Maps)
					yield return entity;
				if (@MappedTo != null)
					yield return @MappedTo;
				foreach(var entity in @TexCoordIndices)
					yield return entity;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}