// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4x3.GeometricConstraintResource;
using Xbim.Ifc4x3.MeasureResource;
using Xbim.Ifc4x3.GeometryResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4x3.Rail;
//## Custom using statements
//##


namespace Xbim.Ifc4x3.Rail
{
	[ExpressType("IfcAlignment2DVerSegTransition", 1401)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcAlignment2DVerSegTransition : IfcAlignment2DVerticalSegment, IInstantiableEntity, IEquatable<@IfcAlignment2DVerSegTransition>
	{

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcAlignment2DVerSegTransition(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcPositiveLengthMeasure? _startRadius;
		private IfcPositiveLengthMeasure? _endRadius;
		private IfcBoolean _isStartRadiusCCW;
		private IfcBoolean _isEndRadiusCCW;
		private IfcTransitionCurveType _transitionCurveType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 11)]
		public IfcPositiveLengthMeasure? @StartRadius 
		{ 
			get 
			{
				if(_activated) return _startRadius;
				Activate();
				return _startRadius;
			} 
			set
			{
				SetValue( v =>  _startRadius = v, _startRadius, value,  "StartRadius", 8);
			} 
		}	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 12)]
		public IfcPositiveLengthMeasure? @EndRadius 
		{ 
			get 
			{
				if(_activated) return _endRadius;
				Activate();
				return _endRadius;
			} 
			set
			{
				SetValue( v =>  _endRadius = v, _endRadius, value,  "EndRadius", 9);
			} 
		}	
		[EntityAttribute(10, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 13)]
		public IfcBoolean @IsStartRadiusCCW 
		{ 
			get 
			{
				if(_activated) return _isStartRadiusCCW;
				Activate();
				return _isStartRadiusCCW;
			} 
			set
			{
				SetValue( v =>  _isStartRadiusCCW = v, _isStartRadiusCCW, value,  "IsStartRadiusCCW", 10);
			} 
		}	
		[EntityAttribute(11, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 14)]
		public IfcBoolean @IsEndRadiusCCW 
		{ 
			get 
			{
				if(_activated) return _isEndRadiusCCW;
				Activate();
				return _isEndRadiusCCW;
			} 
			set
			{
				SetValue( v =>  _isEndRadiusCCW = v, _isEndRadiusCCW, value,  "IsEndRadiusCCW", 11);
			} 
		}	
		[EntityAttribute(12, EntityAttributeState.Mandatory, EntityAttributeType.Enum, EntityAttributeType.None, null, null, 15)]
		public IfcTransitionCurveType @TransitionCurveType 
		{ 
			get 
			{
				if(_activated) return _transitionCurveType;
				Activate();
				return _transitionCurveType;
			} 
			set
			{
				SetValue( v =>  _transitionCurveType = v, _transitionCurveType, value,  "TransitionCurveType", 12);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 7: 
					_startRadius = value.RealVal;
					return;
				case 8: 
					_endRadius = value.RealVal;
					return;
				case 9: 
					_isStartRadiusCCW = value.BooleanVal;
					return;
				case 10: 
					_isEndRadiusCCW = value.BooleanVal;
					return;
				case 11: 
                    _transitionCurveType = (IfcTransitionCurveType) System.Enum.Parse(typeof (IfcTransitionCurveType), value.EnumVal, true);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcAlignment2DVerSegTransition other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}