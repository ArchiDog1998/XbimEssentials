// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4x3.GeometricConstraintResource;
using Xbim.Ifc4x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4x3.Rail;
//## Custom using statements
//##


namespace Xbim.Ifc4x3.Rail
{
	[ExpressType("IfcAlignment2DCantSegment", 1400)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcAlignment2DCantSegment : IfcAlignment2DSegment, IEquatable<@IfcAlignment2DCantSegment>
	{

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcAlignment2DCantSegment(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcPositiveLengthMeasure _startDistAlong;
		private IfcPositiveLengthMeasure _horizontalLength;
		private IfcLengthMeasure _startCantLeft;
		private IfcLengthMeasure? _endCantLeft;
		private IfcLengthMeasure _startCantRight;
		private IfcLengthMeasure? _endCantRight;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 6)]
		public IfcPositiveLengthMeasure @StartDistAlong 
		{ 
			get 
			{
				if(_activated) return _startDistAlong;
				Activate();
				return _startDistAlong;
			} 
			set
			{
				SetValue( v =>  _startDistAlong = v, _startDistAlong, value,  "StartDistAlong", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 7)]
		public IfcPositiveLengthMeasure @HorizontalLength 
		{ 
			get 
			{
				if(_activated) return _horizontalLength;
				Activate();
				return _horizontalLength;
			} 
			set
			{
				SetValue( v =>  _horizontalLength = v, _horizontalLength, value,  "HorizontalLength", 5);
			} 
		}	
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 8)]
		public IfcLengthMeasure @StartCantLeft 
		{ 
			get 
			{
				if(_activated) return _startCantLeft;
				Activate();
				return _startCantLeft;
			} 
			set
			{
				SetValue( v =>  _startCantLeft = v, _startCantLeft, value,  "StartCantLeft", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 9)]
		public IfcLengthMeasure? @EndCantLeft 
		{ 
			get 
			{
				if(_activated) return _endCantLeft;
				Activate();
				return _endCantLeft;
			} 
			set
			{
				SetValue( v =>  _endCantLeft = v, _endCantLeft, value,  "EndCantLeft", 7);
			} 
		}	
		[EntityAttribute(8, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 10)]
		public IfcLengthMeasure @StartCantRight 
		{ 
			get 
			{
				if(_activated) return _startCantRight;
				Activate();
				return _startCantRight;
			} 
			set
			{
				SetValue( v =>  _startCantRight = v, _startCantRight, value,  "StartCantRight", 8);
			} 
		}	
		[EntityAttribute(9, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 11)]
		public IfcLengthMeasure? @EndCantRight 
		{ 
			get 
			{
				if(_activated) return _endCantRight;
				Activate();
				return _endCantRight;
			} 
			set
			{
				SetValue( v =>  _endCantRight = v, _endCantRight, value,  "EndCantRight", 9);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("Segments")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, new int [] { 1 }, new int [] { 1 }, 12)]
		public IEnumerable<IfcAlignment2DCant> @ToCant 
		{ 
			get 
			{
				return Model.Instances.Where<IfcAlignment2DCant>(e => e.Segments != null &&  e.Segments.Contains(this), "Segments", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 3: 
					_startDistAlong = value.RealVal;
					return;
				case 4: 
					_horizontalLength = value.RealVal;
					return;
				case 5: 
					_startCantLeft = value.RealVal;
					return;
				case 6: 
					_endCantLeft = value.RealVal;
					return;
				case 7: 
					_startCantRight = value.RealVal;
					return;
				case 8: 
					_endCantRight = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcAlignment2DCantSegment other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}