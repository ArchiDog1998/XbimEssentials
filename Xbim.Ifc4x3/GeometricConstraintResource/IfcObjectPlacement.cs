// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4x3.Kernel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4x3.GeometricConstraintResource;
//## Custom using statements
//##


namespace Xbim.Ifc4x3.GeometricConstraintResource
{
	[ExpressType("IfcObjectPlacement", 440)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @IfcObjectPlacement : PersistEntity, IEquatable<@IfcObjectPlacement>
	{

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcObjectPlacement(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcObjectPlacement _placementRelTo;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, null, null, 1)]
		public IfcObjectPlacement @PlacementRelTo 
		{ 
			get 
			{
				if(_activated) return _placementRelTo;
				Activate();
				return _placementRelTo;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _placementRelTo = v, _placementRelTo, value,  "PlacementRelTo", 1);
			} 
		}	
		#endregion



		#region Inverse attributes
		[InverseProperty("ObjectPlacement")]
		[EntityAttribute(-1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, new int [] { 0 }, new int [] { -1 }, 2)]
		public IEnumerable<IfcProduct> @PlacesObject 
		{ 
			get 
			{
				return Model.Instances.Where<IfcProduct>(e => Equals(e.ObjectPlacement), "ObjectPlacement", this);
			} 
		}
		#endregion

		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_placementRelTo = (IfcObjectPlacement)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcObjectPlacement other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}