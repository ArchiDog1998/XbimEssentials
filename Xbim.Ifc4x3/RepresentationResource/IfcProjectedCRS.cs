// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Xbim.Ifc4x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4x3.RepresentationResource;
//## Custom using statements
//##


namespace Xbim.Ifc4x3.RepresentationResource
{
	[ExpressType("IfcProjectedCRS", 1230)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcProjectedCRS : IfcCoordinateReferenceSystem, IInstantiableEntity, IContainsEntityReferences, IEquatable<@IfcProjectedCRS>
	{

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcProjectedCRS(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcIdentifier? _geodeticDatum;
		private IfcIdentifier? _verticalDatum;
		private IfcIdentifier? _mapProjection;
		private IfcIdentifier? _mapZone;
		private IfcNamedUnit _mapUnit;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(3, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 5)]
		public IfcIdentifier? @GeodeticDatum 
		{ 
			get 
			{
				if(_activated) return _geodeticDatum;
				Activate();
				return _geodeticDatum;
			} 
			set
			{
				SetValue( v =>  _geodeticDatum = v, _geodeticDatum, value,  "GeodeticDatum", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 6)]
		public IfcIdentifier? @VerticalDatum 
		{ 
			get 
			{
				if(_activated) return _verticalDatum;
				Activate();
				return _verticalDatum;
			} 
			set
			{
				SetValue( v =>  _verticalDatum = v, _verticalDatum, value,  "VerticalDatum", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 7)]
		public IfcIdentifier? @MapProjection 
		{ 
			get 
			{
				if(_activated) return _mapProjection;
				Activate();
				return _mapProjection;
			} 
			set
			{
				SetValue( v =>  _mapProjection = v, _mapProjection, value,  "MapProjection", 5);
			} 
		}	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 8)]
		public IfcIdentifier? @MapZone 
		{ 
			get 
			{
				if(_activated) return _mapZone;
				Activate();
				return _mapZone;
			} 
			set
			{
				SetValue( v =>  _mapZone = v, _mapZone, value,  "MapZone", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, null, null, 9)]
		public IfcNamedUnit @MapUnit 
		{ 
			get 
			{
				if(_activated) return _mapUnit;
				Activate();
				return _mapUnit;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _mapUnit = v, _mapUnit, value,  "MapUnit", 7);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 2: 
					_geodeticDatum = value.StringVal;
					return;
				case 3: 
					_verticalDatum = value.StringVal;
					return;
				case 4: 
					_mapProjection = value.StringVal;
					return;
				case 5: 
					_mapZone = value.StringVal;
					return;
				case 6: 
					_mapUnit = (IfcNamedUnit)(value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcProjectedCRS other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@MapUnit != null)
					yield return @MapUnit;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}