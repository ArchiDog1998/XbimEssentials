// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.Ifc4x3.DateTimeResource;
//## Custom using statements
//##


namespace Xbim.Ifc4x3.DateTimeResource
{
	[ExpressType("IfcWorkTime", 1319)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcWorkTime : IfcSchedulingTime, IInstantiableEntity, IContainsEntityReferences, IEquatable<@IfcWorkTime>
	{

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcWorkTime(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcRecurrencePattern _recurrencePattern;
		private IfcDate? _startDate;
		private IfcDate? _finishDate;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(4, EntityAttributeState.Optional, EntityAttributeType.Class, EntityAttributeType.None, null, null, 4)]
		public IfcRecurrencePattern @RecurrencePattern 
		{ 
			get 
			{
				if(_activated) return _recurrencePattern;
				Activate();
				return _recurrencePattern;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _recurrencePattern = v, _recurrencePattern, value,  "RecurrencePattern", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 5)]
		public IfcDate? @StartDate 
		{ 
			get 
			{
				if(_activated) return _startDate;
				Activate();
				return _startDate;
			} 
			set
			{
				SetValue( v =>  _startDate = v, _startDate, value,  "StartDate", 5);
			} 
		}	
		[EntityAttribute(6, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 6)]
		public IfcDate? @FinishDate 
		{ 
			get 
			{
				if(_activated) return _finishDate;
				Activate();
				return _finishDate;
			} 
			set
			{
				SetValue( v =>  _finishDate = v, _finishDate, value,  "FinishDate", 6);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 3: 
					_recurrencePattern = (IfcRecurrencePattern)(value.EntityVal);
					return;
				case 4: 
					_startDate = value.StringVal;
					return;
				case 5: 
					_finishDate = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcWorkTime other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@RecurrencePattern != null)
					yield return @RecurrencePattern;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}